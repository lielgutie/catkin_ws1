#!/usr/bin/env python

import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import Pose, PoseStamped, Quaternion
from tf.transformations import quaternion_from_euler

def active_cb():
    rospy.loginfo("Goal Active")

def feedback_cb(feedback):
    rospy.loginfo("Current location: " + str(feedback.base_position.pose))

def done_cb(status, result):
    if status == 3:
        rospy.loginfo("Goal Reached")
    elif status == 2 or status == 8:
        rospy.loginfo("Goal Cancelled")
    elif status == 4:
        rospy.loginfo("Goal Aborted")

def send_goals(navclient, goals):
    for goal in goals:
        navclient.send_goal(goal, done_cb=done_cb, active_cb=active_cb, feedback_cb=feedback_cb)
        finished = navclient.wait_for_result()

        if not finished:
            rospy.logerr("Action server not available!")
        else:
            rospy.loginfo(navclient.get_result())

        # Introduce a 5-second delay before sending the next goal
        rospy.sleep(5)

if __name__ == '__main__':
    rospy.init_node('send_goals')

    navclient = actionlib.SimpleActionClient('move_base', MoveBaseAction)
    navclient.wait_for_server()

    # Define the goal poses
    goals = []

    # First goal
    goal1 = MoveBaseGoal()
    goal1.target_pose.header.frame_id = "map"
    goal1.target_pose.header.stamp = rospy.Time.now()

    goal1.target_pose.pose.position.x = 1.883  # Set the x coordinate of the goal position
    goal1.target_pose.pose.position.y = -1.916  # Set the y coordinate of the goal position
    goal1.target_pose.pose.position.z = 0.000  # Set the z coordinate of the goal position

    quat1 = quaternion_from_euler(0, 0, 1)  # Yaw angle in radians (90 degrees)
    goal1.target_pose.pose.orientation = Quaternion(*quat1)

    goals.append(goal1)

    # Second goal
    goal2 = MoveBaseGoal()
    goal2.target_pose.header.frame_id = "map"
    goal2.target_pose.header.stamp = rospy.Time.now()

    goal2.target_pose.pose.position.x =  1.847 # Set the x coordinate of the goal position
    goal2.target_pose.pose.position.y = 1.024  # Set the y coordinate of the goal position
    goal2.target_pose.pose.position.z = 0.000  # Set the z coordinate of the goal position

    quat2 = quaternion_from_euler(0, 0, 1)  # Yaw angle in radians (180 degrees)
    goal2.target_pose.pose.orientation = Quaternion(*quat2)

    goals.append(goal2)

    # Third goal
    goal3 = MoveBaseGoal()
    goal3.target_pose.header.frame_id = "map"
    goal3.target_pose.header.stamp = rospy.Time.now()

    goal3.target_pose.pose.position.x = 0.512  # Set the x coordinate of the goal position
    goal3.target_pose.pose.position.y = -1.969  # Set the y coordinate of the goal position
    goal3.target_pose.pose.position.z = 0.000  # Set the z coordinate of the goal position

    quat3 = quaternion_from_euler(0, 0, 1)  # Yaw angle in radians (-90 degrees)
    goal3.target_pose.pose.orientation = Quaternion(*quat3)

    goals.append(goal3)

    # Capture original pose
    original_pose = MoveBaseGoal()
    original_pose.target_pose.header.frame_id = "map"
    original_pose.target_pose.header.stamp = rospy.Time.now()

    original_pose.target_pose.pose.position.x = 0.0  # Set the x coordinate of the goal position
    original_pose.target_pose.pose.position.y = 0.0  # Set the y coordinate of the goal position
    original_pose.target_pose.pose.position.z = 0.0  # Set the z coordinate of the goal position

    quat_original = quaternion_from_euler(0, 0, 0)  # Yaw angle in radians (0 degrees)
    original_pose.target_pose.pose.orientation = Quaternion(*quat_original)

    goals.append(original_pose)

    # Send the goals
    send_goals(navclient, goals)
